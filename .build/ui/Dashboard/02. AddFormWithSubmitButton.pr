{
  "Action": {
    "FunctionName": "RenderHtml",
    "Parameters": [
      {
        "Type": "string",
        "Name": "html",
        "Value": "<form onsubmit=\"addAmount(event)\" class=\"d-flex align-items-center\">\n    <div class=\"form-group me-2\">\n        <label for=\"userId\" class=\"form-label\">User ID</label>\n        <input type=\"number\" id=\"userId\" class=\"form-control\" required>\n    </div>\n    <div class=\"form-group me-2\">\n        <label for=\"amount\" class=\"form-label\">Amount</label>\n        <input type=\"number\" id=\"amount\" class=\"form-control\" required>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Add amount</button>\n</form>\n\n<script>\n    function addAmount(event) {\n        event.preventDefault();\n        const userId = document.getElementById('userId').value;\n        const amount = document.getElementById('amount').value;\n        callGoal('AddAmount', { userId: userId, amount: amount });\n    }\n</script>"
      },
      {
        "Type": "string",
        "Name": "css",
        "Value": ""
      },
      {
        "Type": "string",
        "Name": "javascript",
        "Value": ""
      }
    ],
    "ReturnValue": null
  },
  "Text": "add form, #userId and #amount, number fields,\n    with submit button \"Add amount\", (all in same line)\n    call !AddAmount #userId, #amount",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "html",
    "scheme": "{\"html\": string,\n\"javascript\": string,\n\"css\": string}",
    "type": "PLang.Modules.UiModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Create the html, javascript and css needed from the user command using Bootstrap 5.0.2 & Fontawesome 5.15.3. \r\n## Rules ##\r\n\tGoal has series of steps. \r\n\tSteps start with dash(-), steps can have sub steps, substeps are indented and are referenced in previous step by {step#} where # is a number, e.g. {step1}.\r\n\tVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\tGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\n\tDO NOT generate the function callGoal, it will be provided\r\n\tAll object.Id or object.id are long and needs to be wrapped with single quote('). This does not apply to other id properties e.g. object.object_id\r\n\tAll properties on variables are case sensitive, keep formatting defined by user.\r\n\tOnly generate html, css, javascript for this sepecific user command.\r\n\tStart of html document(e.g. Doctype, <html>, <body>) will be provided by different system \r\n\t \r\n\tHTML comments and <!-- --> are NOT allowed\r\n\tJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\tUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\tDO NOT use any HtmlHelper library, this elimnates you from using @Html, such as @Html.Raw, @Html.Label, etc.\r\n\tCss should be using up to date css standards. colors should be in rgb.\r\n\tIf a feedback is needed from the user using the html, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\tGoalfile is only provided for context and you should not generate html from Goalfile, only user command. \r\n## Rules ##\r\n\r\nYour job is to build ```html, ```javascript, ```css from the user command and nothing else.\r\n"
          },
          {
            "type": "text",
            "text": "Only write the raw ```html, ```css and ```javascript. No summary, no extra text to explain, be concise"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "\r\n### variables available ###\r\n\r\n### variables available ###\r\n### Goalfile ONLY for context ###\r\n(Goal) Dashboard\n- (%step0%) header with logo.png, 'Plang admin system'\n- (%step1%) add form, #userId and #amount, number fields,\n    with submit button \"Add amount\", (all in same line)\n    call !AddAmount #userId, #amount\n- (%step1%) select 100 newest users, write to %users%\n- (%step2%) table from %users%\n    header: UserId, Balance, Created\n    body: %item.id%, %item.balance%, %item.created%\n\r\n### Goalfile ONLY for context ###\r\n### Razor ###\r\nFROM user command, generate using Razor\r\n\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "add form, #userId and #amount, number fields,\n    with submit button \"Add amount\", (all in same line)\n    call !AddAmount #userId, #amount"
          }
        ]
      }
    ],
    "model": "gpt-4o",
    "caching": true,
    "RawResponse": "```html\n<form onsubmit=\"addAmount(event)\" class=\"d-flex align-items-center\">\n    <div class=\"form-group me-2\">\n        <label for=\"userId\" class=\"form-label\">User ID</label>\n        <input type=\"number\" id=\"userId\" class=\"form-control\" required>\n    </div>\n    <div class=\"form-group me-2\">\n        <label for=\"amount\" class=\"form-label\">Amount</label>\n        <input type=\"number\" id=\"amount\" class=\"form-control\" required>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Add amount</button>\n</form>\n\n<script>\n    function addAmount(event) {\n        event.preventDefault();\n        const userId = document.getElementById('userId').value;\n        const amount = document.getElementById('amount').value;\n        callGoal('AddAmount', { userId: userId, amount: amount });\n    }\n</script>\n```"
  },
  "RunOnBuild": false
}